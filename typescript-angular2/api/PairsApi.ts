/**
 * QuantiModo
 * QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH }                                         from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class PairsApi {
    protected basePath = 'https://app.quantimo.do/api';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }
	
	/**
     * 
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }

    /**
     * Get pairs
     * Pairs cause measurements with effect measurements grouped over the duration of action after the onset delay.
     * @param cause Original variable name for the explanatory or independent variable
     * @param effect Original variable name for the outcome or dependent variable
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     * @param causeSource Name of data source that the cause measurements should come from
     * @param causeUnit Abbreviated name for the unit cause measurements to be returned in
     * @param delay The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the “onset delay”. For example, the “onset delay” between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.
     * @param duration The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable’s value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.
     * @param effectSource Name of data source that the effectmeasurements should come from
     * @param effectUnit Abbreviated name for the unit effect measurements to be returned in
     * @param endTime The most recent date (in epoch time) for which we should return measurements
     * @param startTime The earliest date (in epoch time) for which we should return measurements
     * @param limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
     * @param offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
     * @param sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
     */
    public v1PairsCsvGet(cause: string, effect: string, accessToken?: string, userId?: number, causeSource?: string, causeUnit?: string, delay?: string, duration?: string, effectSource?: string, effectUnit?: string, endTime?: string, startTime?: string, limit?: number, offset?: number, sort?: number, extraHttpRequestParams?: any): Observable<Array<models.Pairs>> {
        return this.v1PairsCsvGetWithHttpInfo(cause, effect, accessToken, userId, causeSource, causeUnit, delay, duration, effectSource, effectUnit, endTime, startTime, limit, offset, sort, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get pairs
     * Pairs cause measurements with effect measurements grouped over the duration of action after the onset delay.
     * @param cause Original variable name for the explanatory or independent variable
     * @param effect Original variable name for the outcome or dependent variable
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     * @param causeSource Name of data source that the cause measurements should come from
     * @param causeUnit Abbreviated name for the unit cause measurements to be returned in
     * @param delay The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the “onset delay”. For example, the “onset delay” between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.
     * @param duration The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable’s value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.
     * @param effectSource Name of data source that the effectmeasurements should come from
     * @param effectUnit Abbreviated name for the unit effect measurements to be returned in
     * @param endTime The most recent date (in epoch time) for which we should return measurements
     * @param startTime The earliest date (in epoch time) for which we should return measurements
     * @param limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
     * @param offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
     * @param sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
     */
    public v1PairsGet(cause: string, effect: string, accessToken?: string, userId?: number, causeSource?: string, causeUnit?: string, delay?: string, duration?: string, effectSource?: string, effectUnit?: string, endTime?: string, startTime?: string, limit?: number, offset?: number, sort?: number, extraHttpRequestParams?: any): Observable<Array<models.Pairs>> {
        return this.v1PairsGetWithHttpInfo(cause, effect, accessToken, userId, causeSource, causeUnit, delay, duration, effectSource, effectUnit, endTime, startTime, limit, offset, sort, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * Get pairs
     * Pairs cause measurements with effect measurements grouped over the duration of action after the onset delay.
     * @param cause Original variable name for the explanatory or independent variable
     * @param effect Original variable name for the outcome or dependent variable
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     * @param causeSource Name of data source that the cause measurements should come from
     * @param causeUnit Abbreviated name for the unit cause measurements to be returned in
     * @param delay The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the “onset delay”. For example, the “onset delay” between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.
     * @param duration The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable’s value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.
     * @param effectSource Name of data source that the effectmeasurements should come from
     * @param effectUnit Abbreviated name for the unit effect measurements to be returned in
     * @param endTime The most recent date (in epoch time) for which we should return measurements
     * @param startTime The earliest date (in epoch time) for which we should return measurements
     * @param limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
     * @param offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
     * @param sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
     */
    public v1PairsCsvGetWithHttpInfo(cause: string, effect: string, accessToken?: string, userId?: number, causeSource?: string, causeUnit?: string, delay?: string, duration?: string, effectSource?: string, effectUnit?: string, endTime?: string, startTime?: string, limit?: number, offset?: number, sort?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v1/pairsCsv`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'cause' is not null or undefined
        if (cause === null || cause === undefined) {
            throw new Error('Required parameter cause was null or undefined when calling v1PairsCsvGet.');
        }
        // verify required parameter 'effect' is not null or undefined
        if (effect === null || effect === undefined) {
            throw new Error('Required parameter effect was null or undefined when calling v1PairsCsvGet.');
        }
        if (accessToken !== undefined) {
            queryParameters.set('access_token', <any>accessToken);
        }
        if (userId !== undefined) {
            queryParameters.set('userId', <any>userId);
        }
        if (cause !== undefined) {
            queryParameters.set('cause', <any>cause);
        }
        if (causeSource !== undefined) {
            queryParameters.set('causeSource', <any>causeSource);
        }
        if (causeUnit !== undefined) {
            queryParameters.set('causeUnit', <any>causeUnit);
        }
        if (delay !== undefined) {
            queryParameters.set('delay', <any>delay);
        }
        if (duration !== undefined) {
            queryParameters.set('duration', <any>duration);
        }
        if (effect !== undefined) {
            queryParameters.set('effect', <any>effect);
        }
        if (effectSource !== undefined) {
            queryParameters.set('effectSource', <any>effectSource);
        }
        if (effectUnit !== undefined) {
            queryParameters.set('effectUnit', <any>effectUnit);
        }
        if (endTime !== undefined) {
            queryParameters.set('endTime', <any>endTime);
        }
        if (startTime !== undefined) {
            queryParameters.set('startTime', <any>startTime);
        }
        if (limit !== undefined) {
            queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined) {
            queryParameters.set('offset', <any>offset);
        }
        if (sort !== undefined) {
            queryParameters.set('sort', <any>sort);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
        // authentication (access_token) required
        if (this.configuration.apiKey)
        {
            formParams.set('access_token', this.configuration.apiKey);
        }
        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get pairs
     * Pairs cause measurements with effect measurements grouped over the duration of action after the onset delay.
     * @param cause Original variable name for the explanatory or independent variable
     * @param effect Original variable name for the outcome or dependent variable
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     * @param causeSource Name of data source that the cause measurements should come from
     * @param causeUnit Abbreviated name for the unit cause measurements to be returned in
     * @param delay The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the “onset delay”. For example, the “onset delay” between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.
     * @param duration The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable’s value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.
     * @param effectSource Name of data source that the effectmeasurements should come from
     * @param effectUnit Abbreviated name for the unit effect measurements to be returned in
     * @param endTime The most recent date (in epoch time) for which we should return measurements
     * @param startTime The earliest date (in epoch time) for which we should return measurements
     * @param limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
     * @param offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
     * @param sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
     */
    public v1PairsGetWithHttpInfo(cause: string, effect: string, accessToken?: string, userId?: number, causeSource?: string, causeUnit?: string, delay?: string, duration?: string, effectSource?: string, effectUnit?: string, endTime?: string, startTime?: string, limit?: number, offset?: number, sort?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v1/pairs`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'cause' is not null or undefined
        if (cause === null || cause === undefined) {
            throw new Error('Required parameter cause was null or undefined when calling v1PairsGet.');
        }
        // verify required parameter 'effect' is not null or undefined
        if (effect === null || effect === undefined) {
            throw new Error('Required parameter effect was null or undefined when calling v1PairsGet.');
        }
        if (accessToken !== undefined) {
            queryParameters.set('access_token', <any>accessToken);
        }
        if (userId !== undefined) {
            queryParameters.set('userId', <any>userId);
        }
        if (cause !== undefined) {
            queryParameters.set('cause', <any>cause);
        }
        if (causeSource !== undefined) {
            queryParameters.set('causeSource', <any>causeSource);
        }
        if (causeUnit !== undefined) {
            queryParameters.set('causeUnit', <any>causeUnit);
        }
        if (delay !== undefined) {
            queryParameters.set('delay', <any>delay);
        }
        if (duration !== undefined) {
            queryParameters.set('duration', <any>duration);
        }
        if (effect !== undefined) {
            queryParameters.set('effect', <any>effect);
        }
        if (effectSource !== undefined) {
            queryParameters.set('effectSource', <any>effectSource);
        }
        if (effectUnit !== undefined) {
            queryParameters.set('effectUnit', <any>effectUnit);
        }
        if (endTime !== undefined) {
            queryParameters.set('endTime', <any>endTime);
        }
        if (startTime !== undefined) {
            queryParameters.set('startTime', <any>startTime);
        }
        if (limit !== undefined) {
            queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined) {
            queryParameters.set('offset', <any>offset);
        }
        if (sort !== undefined) {
            queryParameters.set('sort', <any>sort);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
        // authentication (access_token) required
        if (this.configuration.apiKey)
        {
            formParams.set('access_token', this.configuration.apiKey);
        }
        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
