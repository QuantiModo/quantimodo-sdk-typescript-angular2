/**
 * QuantiModo
 * QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH }                                         from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class MeasurementsApi {
    protected basePath = 'https://app.quantimo.do/api';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }
	
	/**
     * 
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }

    /**
     * Get measurement sources
     * Returns a list of all the apps from which measurement data is obtained.
     */
    public v1MeasurementSourcesGet(extraHttpRequestParams?: any): Observable<models.MeasurementSource> {
        return this.v1MeasurementSourcesGetWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Add a data source
     * Add a life-tracking app or device to the QuantiModo list of data sources.
     * @param body An array of names of data sources you want to add.
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     */
    public v1MeasurementSourcesPost(body: models.MeasurementSource, accessToken?: string, userId?: number, extraHttpRequestParams?: any): Observable<{}> {
        return this.v1MeasurementSourcesPostWithHttpInfo(body, accessToken, userId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get daily measurements for this user
     * Measurements are any value that can be recorded like daily steps, a mood rating, or apples eaten. Supported filter parameters:&lt;ul&gt;&lt;li&gt;&lt;b&gt;value&lt;/b&gt; - Value of measurement&lt;/li&gt;&lt;li&gt;&lt;b&gt;updatedAt&lt;/b&gt; - The time that this measurement was created or last updated in the UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;&lt;/li&gt;&lt;/ul&gt;
     * @param variableName Name of the variable you want measurements for
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     * @param unitAbbreviatedName The unit your want the measurements in
     * @param startTime The lower limit of measurements returned (UTC Iso8601 \&quot;YYYY-MM-DDThh:mm:ss\&quot; format)
     * @param endTime The upper limit of measurements returned (UTC Iso8601 \&quot;YYYY-MM-DDThh:mm:ss\&quot; format)
     * @param groupingWidth The time (in seconds) over which measurements are grouped together
     * @param groupingTimezone The time (in seconds) over which measurements are grouped together
     * @param limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
     * @param offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
     * @param sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
     */
    public v1MeasurementsDailyGet(variableName: string, accessToken?: string, userId?: number, unitAbbreviatedName?: string, startTime?: string, endTime?: string, groupingWidth?: number, groupingTimezone?: string, limit?: number, offset?: number, sort?: number, extraHttpRequestParams?: any): Observable<models.Measurement> {
        return this.v1MeasurementsDailyGetWithHttpInfo(variableName, accessToken, userId, unitAbbreviatedName, startTime, endTime, groupingWidth, groupingTimezone, limit, offset, sort, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Delete a measurement
     * Delete a previously submitted measurement
     * @param body The startTime and variableId of the measurement to be deleted.
     */
    public v1MeasurementsDeletePost(body: models.MeasurementDelete, extraHttpRequestParams?: any): Observable<models.CommonResponse> {
        return this.v1MeasurementsDeletePostWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get measurements for this user
     * Measurements are any value that can be recorded like daily steps, a mood rating, or apples eaten. Supported filter parameters:&lt;ul&gt;&lt;li&gt;&lt;b&gt;value&lt;/b&gt; - Value of measurement&lt;/li&gt;&lt;li&gt;&lt;b&gt;updatedAt&lt;/b&gt; - The time that this measurement was created or last updated in the UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;&lt;/li&gt;&lt;/ul&gt;
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     * @param id Measurement id
     * @param variableName Name of the variable you want measurements for
     * @param variableCategoryName Name of the variable category you want measurements for
     * @param sourceName ID of the source you want measurements for (supports exact name match only)
     * @param value Value of measurement
     * @param unitAbbreviatedName The unit you want the measurements returned in
     * @param earliestMeasurementTime The lower limit of measurements returned in ISO 8601 format or epoch seconds (unixtime)
     * @param latestMeasurementTime The upper limit of measurements returned in ISO 8601 format or epoch seconds (unixtime)
     * @param createdAt The time the measurement record was first created in the format YYYY-MM-DDThh:mm:ss. Time zone should be UTC and not local.
     * @param updatedAt The time the measurement record was last changed in the format YYYY-MM-DDThh:mm:ss. Time zone should be UTC and not local.
     * @param groupingWidth The time (in seconds) over which measurements are grouped together
     * @param groupingTimezone The time (in seconds) over which measurements are grouped together
     * @param limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
     * @param offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
     * @param sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
     */
    public v1MeasurementsGet(accessToken?: string, userId?: number, id?: number, variableName?: string, variableCategoryName?: string, sourceName?: string, value?: string, unitAbbreviatedName?: string, earliestMeasurementTime?: string, latestMeasurementTime?: string, createdAt?: string, updatedAt?: string, groupingWidth?: number, groupingTimezone?: string, limit?: number, offset?: number, sort?: number, extraHttpRequestParams?: any): Observable<models.Measurement> {
        return this.v1MeasurementsGetWithHttpInfo(accessToken, userId, id, variableName, variableCategoryName, sourceName, value, unitAbbreviatedName, earliestMeasurementTime, latestMeasurementTime, createdAt, updatedAt, groupingWidth, groupingTimezone, limit, offset, sort, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Post a new set or update existing measurements to the database
     * You can submit or update multiple measurements in a \&quot;measurements\&quot; sub-array.  If the variable these measurements correspond to does not already exist in the database, it will be automatically added.  The request body should look something like [{\&quot;measurements\&quot;:[{\&quot;startTime\&quot;:1439389320,\&quot;value\&quot;:\&quot;3\&quot;}, {\&quot;startTime\&quot;:1439389319,\&quot;value\&quot;:\&quot;2\&quot;}],\&quot;name\&quot;:\&quot;Acne (out of 5)\&quot;,\&quot;source\&quot;:\&quot;QuantiModo\&quot;,\&quot;category\&quot;:\&quot;Symptoms\&quot;,\&quot;combinationOperation\&quot;:\&quot;MEAN\&quot;,\&quot;unit\&quot;:\&quot;/5\&quot;}]
     * @param body An array of measurements you want to insert.
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     */
    public v1MeasurementsPost(body: models.MeasurementSet, accessToken?: string, userId?: number, extraHttpRequestParams?: any): Observable<{}> {
        return this.v1MeasurementsPostWithHttpInfo(body, accessToken, userId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get measurements range for this user
     * Get Unix time-stamp (epoch time) of the user&#39;s first and last measurements taken.
     * @param sources Enter source name to limit to specific source (varchar)
     * @param user If not specified, uses currently logged in user (bigint)
     */
    public v1MeasurementsRangeGet(sources?: string, user?: number, extraHttpRequestParams?: any): Observable<models.MeasurementRange> {
        return this.v1MeasurementsRangeGetWithHttpInfo(sources, user, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Update a measurement
     * Delete a previously submitted measurement
     * @param body The id as well as the new startTime, note, and/or value of the measurement to be updated
     */
    public v1MeasurementsUpdatePost(body: models.MeasurementUpdate, extraHttpRequestParams?: any): Observable<models.CommonResponse> {
        return this.v1MeasurementsUpdatePostWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get Measurements CSV
     * Download a CSV containing all user measurements
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     */
    public v2MeasurementsCsvGet(accessToken?: string, userId?: number, extraHttpRequestParams?: any): Observable<any> {
        return this.v2MeasurementsCsvGetWithHttpInfo(accessToken, userId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Post Request for Measurements CSV
     * Use this endpoint to schedule a CSV export containing all user measurements to be emailed to the user within 24 hours.
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     */
    public v2MeasurementsRequestCsvPost(accessToken?: string, userId?: number, extraHttpRequestParams?: any): Observable<number> {
        return this.v2MeasurementsRequestCsvPostWithHttpInfo(accessToken, userId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Post Request for Measurements PDF
     * Use this endpoint to schedule a PDF export containing all user measurements to be emailed to the user within 24 hours.
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     */
    public v2MeasurementsRequestPdfPost(accessToken?: string, userId?: number, extraHttpRequestParams?: any): Observable<number> {
        return this.v2MeasurementsRequestPdfPostWithHttpInfo(accessToken, userId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Post Request for Measurements XLS
     * Use this endpoint to schedule a XLS export containing all user measurements to be emailed to the user within 24 hours.
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     */
    public v2MeasurementsRequestXlsPost(accessToken?: string, userId?: number, extraHttpRequestParams?: any): Observable<number> {
        return this.v2MeasurementsRequestXlsPostWithHttpInfo(accessToken, userId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * Get measurement sources
     * Returns a list of all the apps from which measurement data is obtained.
     */
    public v1MeasurementSourcesGetWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v1/measurementSources`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
        // authentication (access_token) required
        if (this.configuration.apiKey)
        {
            formParams.set('access_token', this.configuration.apiKey);
        }
        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Add a data source
     * Add a life-tracking app or device to the QuantiModo list of data sources.
     * @param body An array of names of data sources you want to add.
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     */
    public v1MeasurementSourcesPostWithHttpInfo(body: models.MeasurementSource, accessToken?: string, userId?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v1/measurementSources`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling v1MeasurementSourcesPost.');
        }
        if (accessToken !== undefined) {
            queryParameters.set('access_token', <any>accessToken);
        }
        if (userId !== undefined) {
            queryParameters.set('userId', <any>userId);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
        // authentication (access_token) required
        if (this.configuration.apiKey)
        {
            formParams.set('access_token', this.configuration.apiKey);
        }
        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get daily measurements for this user
     * Measurements are any value that can be recorded like daily steps, a mood rating, or apples eaten. Supported filter parameters:&lt;ul&gt;&lt;li&gt;&lt;b&gt;value&lt;/b&gt; - Value of measurement&lt;/li&gt;&lt;li&gt;&lt;b&gt;updatedAt&lt;/b&gt; - The time that this measurement was created or last updated in the UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;&lt;/li&gt;&lt;/ul&gt;
     * @param variableName Name of the variable you want measurements for
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     * @param unitAbbreviatedName The unit your want the measurements in
     * @param startTime The lower limit of measurements returned (UTC Iso8601 \&quot;YYYY-MM-DDThh:mm:ss\&quot; format)
     * @param endTime The upper limit of measurements returned (UTC Iso8601 \&quot;YYYY-MM-DDThh:mm:ss\&quot; format)
     * @param groupingWidth The time (in seconds) over which measurements are grouped together
     * @param groupingTimezone The time (in seconds) over which measurements are grouped together
     * @param limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
     * @param offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
     * @param sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
     */
    public v1MeasurementsDailyGetWithHttpInfo(variableName: string, accessToken?: string, userId?: number, unitAbbreviatedName?: string, startTime?: string, endTime?: string, groupingWidth?: number, groupingTimezone?: string, limit?: number, offset?: number, sort?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v1/measurements/daily`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'variableName' is not null or undefined
        if (variableName === null || variableName === undefined) {
            throw new Error('Required parameter variableName was null or undefined when calling v1MeasurementsDailyGet.');
        }
        if (accessToken !== undefined) {
            queryParameters.set('access_token', <any>accessToken);
        }
        if (userId !== undefined) {
            queryParameters.set('userId', <any>userId);
        }
        if (variableName !== undefined) {
            queryParameters.set('variableName', <any>variableName);
        }
        if (unitAbbreviatedName !== undefined) {
            queryParameters.set('unitAbbreviatedName', <any>unitAbbreviatedName);
        }
        if (startTime !== undefined) {
            queryParameters.set('startTime', <any>startTime);
        }
        if (endTime !== undefined) {
            queryParameters.set('endTime', <any>endTime);
        }
        if (groupingWidth !== undefined) {
            queryParameters.set('groupingWidth', <any>groupingWidth);
        }
        if (groupingTimezone !== undefined) {
            queryParameters.set('groupingTimezone', <any>groupingTimezone);
        }
        if (limit !== undefined) {
            queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined) {
            queryParameters.set('offset', <any>offset);
        }
        if (sort !== undefined) {
            queryParameters.set('sort', <any>sort);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
        // authentication (access_token) required
        if (this.configuration.apiKey)
        {
            formParams.set('access_token', this.configuration.apiKey);
        }
        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Delete a measurement
     * Delete a previously submitted measurement
     * @param body The startTime and variableId of the measurement to be deleted.
     */
    public v1MeasurementsDeletePostWithHttpInfo(body: models.MeasurementDelete, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v1/measurements/delete`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling v1MeasurementsDeletePost.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
        // authentication (access_token) required
        if (this.configuration.apiKey)
        {
            formParams.set('access_token', this.configuration.apiKey);
        }
        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get measurements for this user
     * Measurements are any value that can be recorded like daily steps, a mood rating, or apples eaten. Supported filter parameters:&lt;ul&gt;&lt;li&gt;&lt;b&gt;value&lt;/b&gt; - Value of measurement&lt;/li&gt;&lt;li&gt;&lt;b&gt;updatedAt&lt;/b&gt; - The time that this measurement was created or last updated in the UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;&lt;/li&gt;&lt;/ul&gt;
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     * @param id Measurement id
     * @param variableName Name of the variable you want measurements for
     * @param variableCategoryName Name of the variable category you want measurements for
     * @param sourceName ID of the source you want measurements for (supports exact name match only)
     * @param value Value of measurement
     * @param unitAbbreviatedName The unit you want the measurements returned in
     * @param earliestMeasurementTime The lower limit of measurements returned in ISO 8601 format or epoch seconds (unixtime)
     * @param latestMeasurementTime The upper limit of measurements returned in ISO 8601 format or epoch seconds (unixtime)
     * @param createdAt The time the measurement record was first created in the format YYYY-MM-DDThh:mm:ss. Time zone should be UTC and not local.
     * @param updatedAt The time the measurement record was last changed in the format YYYY-MM-DDThh:mm:ss. Time zone should be UTC and not local.
     * @param groupingWidth The time (in seconds) over which measurements are grouped together
     * @param groupingTimezone The time (in seconds) over which measurements are grouped together
     * @param limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
     * @param offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
     * @param sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
     */
    public v1MeasurementsGetWithHttpInfo(accessToken?: string, userId?: number, id?: number, variableName?: string, variableCategoryName?: string, sourceName?: string, value?: string, unitAbbreviatedName?: string, earliestMeasurementTime?: string, latestMeasurementTime?: string, createdAt?: string, updatedAt?: string, groupingWidth?: number, groupingTimezone?: string, limit?: number, offset?: number, sort?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v1/measurements`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (accessToken !== undefined) {
            queryParameters.set('access_token', <any>accessToken);
        }
        if (userId !== undefined) {
            queryParameters.set('userId', <any>userId);
        }
        if (id !== undefined) {
            queryParameters.set('id', <any>id);
        }
        if (variableName !== undefined) {
            queryParameters.set('variableName', <any>variableName);
        }
        if (variableCategoryName !== undefined) {
            queryParameters.set('variableCategoryName', <any>variableCategoryName);
        }
        if (sourceName !== undefined) {
            queryParameters.set('sourceName', <any>sourceName);
        }
        if (value !== undefined) {
            queryParameters.set('value', <any>value);
        }
        if (unitAbbreviatedName !== undefined) {
            queryParameters.set('unitAbbreviatedName', <any>unitAbbreviatedName);
        }
        if (earliestMeasurementTime !== undefined) {
            queryParameters.set('earliestMeasurementTime', <any>earliestMeasurementTime);
        }
        if (latestMeasurementTime !== undefined) {
            queryParameters.set('latestMeasurementTime', <any>latestMeasurementTime);
        }
        if (createdAt !== undefined) {
            queryParameters.set('createdAt', <any>createdAt);
        }
        if (updatedAt !== undefined) {
            queryParameters.set('updatedAt', <any>updatedAt);
        }
        if (groupingWidth !== undefined) {
            queryParameters.set('groupingWidth', <any>groupingWidth);
        }
        if (groupingTimezone !== undefined) {
            queryParameters.set('groupingTimezone', <any>groupingTimezone);
        }
        if (limit !== undefined) {
            queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined) {
            queryParameters.set('offset', <any>offset);
        }
        if (sort !== undefined) {
            queryParameters.set('sort', <any>sort);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
        // authentication (access_token) required
        if (this.configuration.apiKey)
        {
            formParams.set('access_token', this.configuration.apiKey);
        }
        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Post a new set or update existing measurements to the database
     * You can submit or update multiple measurements in a \&quot;measurements\&quot; sub-array.  If the variable these measurements correspond to does not already exist in the database, it will be automatically added.  The request body should look something like [{\&quot;measurements\&quot;:[{\&quot;startTime\&quot;:1439389320,\&quot;value\&quot;:\&quot;3\&quot;}, {\&quot;startTime\&quot;:1439389319,\&quot;value\&quot;:\&quot;2\&quot;}],\&quot;name\&quot;:\&quot;Acne (out of 5)\&quot;,\&quot;source\&quot;:\&quot;QuantiModo\&quot;,\&quot;category\&quot;:\&quot;Symptoms\&quot;,\&quot;combinationOperation\&quot;:\&quot;MEAN\&quot;,\&quot;unit\&quot;:\&quot;/5\&quot;}]
     * @param body An array of measurements you want to insert.
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     */
    public v1MeasurementsPostWithHttpInfo(body: models.MeasurementSet, accessToken?: string, userId?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v1/measurements`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling v1MeasurementsPost.');
        }
        if (accessToken !== undefined) {
            queryParameters.set('access_token', <any>accessToken);
        }
        if (userId !== undefined) {
            queryParameters.set('userId', <any>userId);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
        // authentication (access_token) required
        if (this.configuration.apiKey)
        {
            formParams.set('access_token', this.configuration.apiKey);
        }
        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get measurements range for this user
     * Get Unix time-stamp (epoch time) of the user&#39;s first and last measurements taken.
     * @param sources Enter source name to limit to specific source (varchar)
     * @param user If not specified, uses currently logged in user (bigint)
     */
    public v1MeasurementsRangeGetWithHttpInfo(sources?: string, user?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v1/measurementsRange`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (sources !== undefined) {
            queryParameters.set('sources', <any>sources);
        }
        if (user !== undefined) {
            queryParameters.set('user', <any>user);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
        // authentication (access_token) required
        if (this.configuration.apiKey)
        {
            formParams.set('access_token', this.configuration.apiKey);
        }
        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Update a measurement
     * Delete a previously submitted measurement
     * @param body The id as well as the new startTime, note, and/or value of the measurement to be updated
     */
    public v1MeasurementsUpdatePostWithHttpInfo(body: models.MeasurementUpdate, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v1/measurements/update`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling v1MeasurementsUpdatePost.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
        // authentication (access_token) required
        if (this.configuration.apiKey)
        {
            formParams.set('access_token', this.configuration.apiKey);
        }
        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get Measurements CSV
     * Download a CSV containing all user measurements
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     */
    public v2MeasurementsCsvGetWithHttpInfo(accessToken?: string, userId?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v2/measurements/csv`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (accessToken !== undefined) {
            queryParameters.set('access_token', <any>accessToken);
        }
        if (userId !== undefined) {
            queryParameters.set('userId', <any>userId);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/csv'
        ];
        
        // authentication (access_token) required
        if (this.configuration.apiKey)
        {
            formParams.set('access_token', this.configuration.apiKey);
        }
        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Post Request for Measurements CSV
     * Use this endpoint to schedule a CSV export containing all user measurements to be emailed to the user within 24 hours.
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     */
    public v2MeasurementsRequestCsvPostWithHttpInfo(accessToken?: string, userId?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v2/measurements/request_csv`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (accessToken !== undefined) {
            queryParameters.set('access_token', <any>accessToken);
        }
        if (userId !== undefined) {
            queryParameters.set('userId', <any>userId);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
        // authentication (access_token) required
        if (this.configuration.apiKey)
        {
            formParams.set('access_token', this.configuration.apiKey);
        }
        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Post Request for Measurements PDF
     * Use this endpoint to schedule a PDF export containing all user measurements to be emailed to the user within 24 hours.
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     */
    public v2MeasurementsRequestPdfPostWithHttpInfo(accessToken?: string, userId?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v2/measurements/request_pdf`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (accessToken !== undefined) {
            queryParameters.set('access_token', <any>accessToken);
        }
        if (userId !== undefined) {
            queryParameters.set('userId', <any>userId);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
        // authentication (access_token) required
        if (this.configuration.apiKey)
        {
            formParams.set('access_token', this.configuration.apiKey);
        }
        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Post Request for Measurements XLS
     * Use this endpoint to schedule a XLS export containing all user measurements to be emailed to the user within 24 hours.
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     */
    public v2MeasurementsRequestXlsPostWithHttpInfo(accessToken?: string, userId?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v2/measurements/request_xls`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (accessToken !== undefined) {
            queryParameters.set('access_token', <any>accessToken);
        }
        if (userId !== undefined) {
            queryParameters.set('userId', <any>userId);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
        // authentication (access_token) required
        if (this.configuration.apiKey)
        {
            formParams.set('access_token', this.configuration.apiKey);
        }
        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
