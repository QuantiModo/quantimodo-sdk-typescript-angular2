/**
 * QuantiModo
 * QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH }                                         from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class ConnectorsApi {
    protected basePath = 'https://app.quantimo.do/api';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }
	
	/**
     * 
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }

    /**
     * Mobile connect page
     * This page is designed to be opened in a webview.  Instead of using popup authentication boxes, it uses redirection. You can include the user&#39;s access_token as a URL parameter like https://app.quantimo.do/api/v1/connect/mobile?access_token&#x3D;123
     * @param accessToken User OAuth access token
     * @param userId User&#39;s id
     */
    public v1ConnectMobileGet(accessToken: string, userId?: number, extraHttpRequestParams?: any): Observable<{}> {
        return this.v1ConnectMobileGetWithHttpInfo(accessToken, userId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Obtain a token from 3rd party data source
     * Attempt to obtain a token from the data provider, store it in the database. With this, the connector to continue to obtain new user data until the token is revoked.
     * @param connectorName Lowercase system name of the source application or device. Get a list of available connectors from the /v1/connectors/list endpoint.
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     */
    public v1ConnectorsConnectorNameConnectGet(connectorName: string, accessToken?: string, userId?: number, extraHttpRequestParams?: any): Observable<{}> {
        return this.v1ConnectorsConnectorNameConnectGetWithHttpInfo(connectorName, accessToken, userId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Connection Instructions
     * Returns instructions that describe what parameters and endpoint to use to connect to the given data provider.
     * @param connectorName Lowercase system name of the source application or device. Get a list of available connectors from the /v1/connectors/list endpoint.
     * @param parameters JSON Array of Parameters for the request to enable connector.
     * @param url URL which should be used to enable the connector.
     * @param usePopup Should use popup when enabling connector
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     */
    public v1ConnectorsConnectorNameConnectInstructionsGet(connectorName: string, parameters: string, url: string, usePopup: boolean, accessToken?: string, userId?: number, extraHttpRequestParams?: any): Observable<{}> {
        return this.v1ConnectorsConnectorNameConnectInstructionsGetWithHttpInfo(connectorName, parameters, url, usePopup, accessToken, userId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Connect Parameter
     * Returns instructions that describe what parameters and endpoint to use to connect to the given data provider.
     * @param connectorName Lowercase system name of the source application or device. Get a list of available connectors from the /v1/connectors/list endpoint.
     * @param displayName Name of the parameter that is user visible in the form
     * @param key Name of the property that the user has to enter such as username or password Connector (used in HTTP request)
     * @param placeholder Placeholder hint value for the parameter input tag.
     * @param type Type of input field such as those found here http://www.w3schools.com/tags/tag_input.asp
     * @param usePopup Should use popup when enabling connector
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     * @param defaultValue Default parameter value
     */
    public v1ConnectorsConnectorNameConnectParameterGet(connectorName: string, displayName: string, key: string, placeholder: string, type: string, usePopup: boolean, accessToken?: string, userId?: number, defaultValue?: string, extraHttpRequestParams?: any): Observable<models.ConnectorInstruction> {
        return this.v1ConnectorsConnectorNameConnectParameterGetWithHttpInfo(connectorName, displayName, key, placeholder, type, usePopup, accessToken, userId, defaultValue, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Delete stored connection info
     * The disconnect method deletes any stored tokens or connection information from the connectors database.
     * @param connectorName Lowercase system name of the source application or device. Get a list of available connectors from the /v1/connectors/list endpoint.
     */
    public v1ConnectorsConnectorNameDisconnectGet(connectorName: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.v1ConnectorsConnectorNameDisconnectGetWithHttpInfo(connectorName, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get connector info for user
     * Returns information about the connector such as the connector id, whether or not is connected for this user (i.e. we have a token or credentials), and its update history for the user.
     * @param connectorName Lowercase system name of the source application or device. Get a list of available connectors from the /v1/connectors/list endpoint.
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     */
    public v1ConnectorsConnectorNameInfoGet(connectorName: string, accessToken?: string, userId?: number, extraHttpRequestParams?: any): Observable<models.ConnectorInfo> {
        return this.v1ConnectorsConnectorNameInfoGetWithHttpInfo(connectorName, accessToken, userId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Sync with data source
     * The update method tells the QM Connector Framework to check with the data provider (such as Fitbit or MyFitnessPal) and retrieve any new measurements available.
     * @param connectorName Lowercase system name of the source application or device
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     */
    public v1ConnectorsConnectorNameUpdateGet(connectorName: string, accessToken?: string, userId?: number, extraHttpRequestParams?: any): Observable<{}> {
        return this.v1ConnectorsConnectorNameUpdateGetWithHttpInfo(connectorName, accessToken, userId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * List of Connectors
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     */
    public v1ConnectorsListGet(extraHttpRequestParams?: any): Observable<Array<models.Connector>> {
        return this.v1ConnectorsListGetWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get embeddable connect javascript
     * Get embeddable connect javascript. Usage:   - Embedding in applications with popups for 3rd-party authentication windows.     Use &#x60;qmSetupInPopup&#x60; function after connecting &#x60;connect.js&#x60;.   - Embedding in applications with popups for 3rd-party authentication windows.     Requires a selector to block. It will be embedded in this block.     Use &#x60;qmSetupOnPage&#x60; function after connecting &#x60;connect.js&#x60;.   - Embedding in mobile applications without popups for 3rd-party authentication.     Use &#x60;qmSetupOnMobile&#x60; function after connecting &#x60;connect.js&#x60;.     If using in a Cordova application call  &#x60;qmSetupOnIonic&#x60; function after connecting &#x60;connect.js&#x60;.
     * @param accessToken User&#39;s OAuth2 access token
     */
    public v1IntegrationJsGet(accessToken?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.v1IntegrationJsGetWithHttpInfo(accessToken, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * Mobile connect page
     * This page is designed to be opened in a webview.  Instead of using popup authentication boxes, it uses redirection. You can include the user&#39;s access_token as a URL parameter like https://app.quantimo.do/api/v1/connect/mobile?access_token&#x3D;123
     * @param accessToken User OAuth access token
     * @param userId User&#39;s id
     */
    public v1ConnectMobileGetWithHttpInfo(accessToken: string, userId?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v1/connect/mobile`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'accessToken' is not null or undefined
        if (accessToken === null || accessToken === undefined) {
            throw new Error('Required parameter accessToken was null or undefined when calling v1ConnectMobileGet.');
        }
        if (accessToken !== undefined) {
            queryParameters.set('access_token', <any>accessToken);
        }
        if (userId !== undefined) {
            queryParameters.set('userId', <any>userId);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/html'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Obtain a token from 3rd party data source
     * Attempt to obtain a token from the data provider, store it in the database. With this, the connector to continue to obtain new user data until the token is revoked.
     * @param connectorName Lowercase system name of the source application or device. Get a list of available connectors from the /v1/connectors/list endpoint.
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     */
    public v1ConnectorsConnectorNameConnectGetWithHttpInfo(connectorName: string, accessToken?: string, userId?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v1/connectors/${connectorName}/connect`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'connectorName' is not null or undefined
        if (connectorName === null || connectorName === undefined) {
            throw new Error('Required parameter connectorName was null or undefined when calling v1ConnectorsConnectorNameConnectGet.');
        }
        if (accessToken !== undefined) {
            queryParameters.set('access_token', <any>accessToken);
        }
        if (userId !== undefined) {
            queryParameters.set('userId', <any>userId);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
        // authentication (access_token) required
        if (this.configuration.apiKey)
        {
            formParams.set('access_token', this.configuration.apiKey);
        }
        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Connection Instructions
     * Returns instructions that describe what parameters and endpoint to use to connect to the given data provider.
     * @param connectorName Lowercase system name of the source application or device. Get a list of available connectors from the /v1/connectors/list endpoint.
     * @param parameters JSON Array of Parameters for the request to enable connector.
     * @param url URL which should be used to enable the connector.
     * @param usePopup Should use popup when enabling connector
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     */
    public v1ConnectorsConnectorNameConnectInstructionsGetWithHttpInfo(connectorName: string, parameters: string, url: string, usePopup: boolean, accessToken?: string, userId?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v1/connectors/${connectorName}/connectInstructions`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'connectorName' is not null or undefined
        if (connectorName === null || connectorName === undefined) {
            throw new Error('Required parameter connectorName was null or undefined when calling v1ConnectorsConnectorNameConnectInstructionsGet.');
        }
        // verify required parameter 'parameters' is not null or undefined
        if (parameters === null || parameters === undefined) {
            throw new Error('Required parameter parameters was null or undefined when calling v1ConnectorsConnectorNameConnectInstructionsGet.');
        }
        // verify required parameter 'url' is not null or undefined
        if (url === null || url === undefined) {
            throw new Error('Required parameter url was null or undefined when calling v1ConnectorsConnectorNameConnectInstructionsGet.');
        }
        // verify required parameter 'usePopup' is not null or undefined
        if (usePopup === null || usePopup === undefined) {
            throw new Error('Required parameter usePopup was null or undefined when calling v1ConnectorsConnectorNameConnectInstructionsGet.');
        }
        if (accessToken !== undefined) {
            queryParameters.set('access_token', <any>accessToken);
        }
        if (userId !== undefined) {
            queryParameters.set('userId', <any>userId);
        }
        if (parameters !== undefined) {
            queryParameters.set('parameters', <any>parameters);
        }
        if (url !== undefined) {
            queryParameters.set('url', <any>url);
        }
        if (usePopup !== undefined) {
            queryParameters.set('usePopup', <any>usePopup);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
        // authentication (access_token) required
        if (this.configuration.apiKey)
        {
            formParams.set('access_token', this.configuration.apiKey);
        }
        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Connect Parameter
     * Returns instructions that describe what parameters and endpoint to use to connect to the given data provider.
     * @param connectorName Lowercase system name of the source application or device. Get a list of available connectors from the /v1/connectors/list endpoint.
     * @param displayName Name of the parameter that is user visible in the form
     * @param key Name of the property that the user has to enter such as username or password Connector (used in HTTP request)
     * @param placeholder Placeholder hint value for the parameter input tag.
     * @param type Type of input field such as those found here http://www.w3schools.com/tags/tag_input.asp
     * @param usePopup Should use popup when enabling connector
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     * @param defaultValue Default parameter value
     */
    public v1ConnectorsConnectorNameConnectParameterGetWithHttpInfo(connectorName: string, displayName: string, key: string, placeholder: string, type: string, usePopup: boolean, accessToken?: string, userId?: number, defaultValue?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v1/connectors/${connectorName}/connectParameter`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'connectorName' is not null or undefined
        if (connectorName === null || connectorName === undefined) {
            throw new Error('Required parameter connectorName was null or undefined when calling v1ConnectorsConnectorNameConnectParameterGet.');
        }
        // verify required parameter 'displayName' is not null or undefined
        if (displayName === null || displayName === undefined) {
            throw new Error('Required parameter displayName was null or undefined when calling v1ConnectorsConnectorNameConnectParameterGet.');
        }
        // verify required parameter 'key' is not null or undefined
        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling v1ConnectorsConnectorNameConnectParameterGet.');
        }
        // verify required parameter 'placeholder' is not null or undefined
        if (placeholder === null || placeholder === undefined) {
            throw new Error('Required parameter placeholder was null or undefined when calling v1ConnectorsConnectorNameConnectParameterGet.');
        }
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling v1ConnectorsConnectorNameConnectParameterGet.');
        }
        // verify required parameter 'usePopup' is not null or undefined
        if (usePopup === null || usePopup === undefined) {
            throw new Error('Required parameter usePopup was null or undefined when calling v1ConnectorsConnectorNameConnectParameterGet.');
        }
        if (accessToken !== undefined) {
            queryParameters.set('access_token', <any>accessToken);
        }
        if (userId !== undefined) {
            queryParameters.set('userId', <any>userId);
        }
        if (defaultValue !== undefined) {
            queryParameters.set('defaultValue', <any>defaultValue);
        }
        if (displayName !== undefined) {
            queryParameters.set('displayName', <any>displayName);
        }
        if (key !== undefined) {
            queryParameters.set('key', <any>key);
        }
        if (placeholder !== undefined) {
            queryParameters.set('placeholder', <any>placeholder);
        }
        if (type !== undefined) {
            queryParameters.set('type', <any>type);
        }
        if (usePopup !== undefined) {
            queryParameters.set('usePopup', <any>usePopup);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
        // authentication (access_token) required
        if (this.configuration.apiKey)
        {
            formParams.set('access_token', this.configuration.apiKey);
        }
        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Delete stored connection info
     * The disconnect method deletes any stored tokens or connection information from the connectors database.
     * @param connectorName Lowercase system name of the source application or device. Get a list of available connectors from the /v1/connectors/list endpoint.
     */
    public v1ConnectorsConnectorNameDisconnectGetWithHttpInfo(connectorName: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v1/connectors/${connectorName}/disconnect`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'connectorName' is not null or undefined
        if (connectorName === null || connectorName === undefined) {
            throw new Error('Required parameter connectorName was null or undefined when calling v1ConnectorsConnectorNameDisconnectGet.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
        // authentication (access_token) required
        if (this.configuration.apiKey)
        {
            formParams.set('access_token', this.configuration.apiKey);
        }
        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get connector info for user
     * Returns information about the connector such as the connector id, whether or not is connected for this user (i.e. we have a token or credentials), and its update history for the user.
     * @param connectorName Lowercase system name of the source application or device. Get a list of available connectors from the /v1/connectors/list endpoint.
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     */
    public v1ConnectorsConnectorNameInfoGetWithHttpInfo(connectorName: string, accessToken?: string, userId?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v1/connectors/${connectorName}/info`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'connectorName' is not null or undefined
        if (connectorName === null || connectorName === undefined) {
            throw new Error('Required parameter connectorName was null or undefined when calling v1ConnectorsConnectorNameInfoGet.');
        }
        if (accessToken !== undefined) {
            queryParameters.set('access_token', <any>accessToken);
        }
        if (userId !== undefined) {
            queryParameters.set('userId', <any>userId);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
        // authentication (access_token) required
        if (this.configuration.apiKey)
        {
            formParams.set('access_token', this.configuration.apiKey);
        }
        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Sync with data source
     * The update method tells the QM Connector Framework to check with the data provider (such as Fitbit or MyFitnessPal) and retrieve any new measurements available.
     * @param connectorName Lowercase system name of the source application or device
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     */
    public v1ConnectorsConnectorNameUpdateGetWithHttpInfo(connectorName: string, accessToken?: string, userId?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v1/connectors/${connectorName}/update`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'connectorName' is not null or undefined
        if (connectorName === null || connectorName === undefined) {
            throw new Error('Required parameter connectorName was null or undefined when calling v1ConnectorsConnectorNameUpdateGet.');
        }
        if (accessToken !== undefined) {
            queryParameters.set('access_token', <any>accessToken);
        }
        if (userId !== undefined) {
            queryParameters.set('userId', <any>userId);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
        // authentication (access_token) required
        if (this.configuration.apiKey)
        {
            formParams.set('access_token', this.configuration.apiKey);
        }
        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * List of Connectors
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     */
    public v1ConnectorsListGetWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v1/connectors/list`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
        // authentication (access_token) required
        if (this.configuration.apiKey)
        {
            formParams.set('access_token', this.configuration.apiKey);
        }
        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get embeddable connect javascript
     * Get embeddable connect javascript. Usage:   - Embedding in applications with popups for 3rd-party authentication windows.     Use &#x60;qmSetupInPopup&#x60; function after connecting &#x60;connect.js&#x60;.   - Embedding in applications with popups for 3rd-party authentication windows.     Requires a selector to block. It will be embedded in this block.     Use &#x60;qmSetupOnPage&#x60; function after connecting &#x60;connect.js&#x60;.   - Embedding in mobile applications without popups for 3rd-party authentication.     Use &#x60;qmSetupOnMobile&#x60; function after connecting &#x60;connect.js&#x60;.     If using in a Cordova application call  &#x60;qmSetupOnIonic&#x60; function after connecting &#x60;connect.js&#x60;.
     * @param accessToken User&#39;s OAuth2 access token
     */
    public v1IntegrationJsGetWithHttpInfo(accessToken?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v1/integration.js`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (accessToken !== undefined) {
            queryParameters.set('access_token', <any>accessToken);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/x-javascript'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
