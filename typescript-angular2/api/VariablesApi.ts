/**
 * QuantiModo
 * QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH }                                         from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class VariablesApi {
    protected basePath = 'https://app.quantimo.do/api';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }
	
	/**
     * 
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }

    /**
     * Get public variables
     * This endpoint retrieves an array of all public variables. Public variables are things like foods, medications, symptoms, conditions, and anything not unique to a particular user. For instance, a telephone number or name would not be a public variable.
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     * @param id Common variable id
     * @param category Filter data by category
     * @param name Original name of the variable (supports exact name match only)
     * @param updatedAt Filter by the last time any of the properties of the variable were changed. Uses UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;
     * @param source The name of the data source that created the variable (supports exact name match only). So if you have a client application and you only want variables that were last updated by your app, you can include the name of your app here
     * @param latestMeasurementTime Filter variables based on the last time a measurement for them was created or updated in the UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;
     * @param numberOfRawMeasurements Filter variables by the total number of measurements that they have. This could be used of you want to filter or sort by popularity.
     * @param lastSource Limit variables to those which measurements were last submitted by a specific source. So if you have a client application and you only want variables that were last updated by your app, you can include the name of your app here. (supports exact name match only)
     * @param limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
     * @param offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
     * @param sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
     */
    public v1PublicVariablesGet(accessToken?: string, userId?: number, id?: number, category?: string, name?: string, updatedAt?: string, source?: string, latestMeasurementTime?: string, numberOfRawMeasurements?: string, lastSource?: string, limit?: number, offset?: number, sort?: number, extraHttpRequestParams?: any): Observable<models.Variable> {
        return this.v1PublicVariablesGetWithHttpInfo(accessToken, userId, id, category, name, updatedAt, source, latestMeasurementTime, numberOfRawMeasurements, lastSource, limit, offset, sort, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get top 5 PUBLIC variables with the most correlations
     * Get top 5 PUBLIC variables with the most correlations containing the entered search characters. For example, search for &#39;mood&#39; as an effect. Since &#39;Overall Mood&#39; has a lot of correlations with other variables, it should be in the autocomplete list.Supported filter parameters:&lt;ul&gt;&lt;li&gt;&lt;b&gt;category&lt;/b&gt; - Category of Variable&lt;/li&gt;&lt;/ul&gt;
     * @param search Search query can be some fraction of a variable name.
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     * @param variableCategoryName Filter variables by category name. The variable categories include Activity, Causes of Illness, Cognitive Performance, Conditions, Environment, Foods, Location, Miscellaneous, Mood, Nutrition, Physical Activity, Physique, Sleep, Social Interactions, Symptoms, Treatments, Vital Signs, and Work.
     * @param source Specify a data source name to only return variables from a specific data source.
     * @param effectOrCause Indicate if you only want variables that have user correlations. Possible values are effect and cause.
     * @param publicEffectOrCause Indicate if you only want variables that have aggregated correlations.  Possible values are effect and cause.
     * @param limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
     * @param offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
     * @param sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
     */
    public v1PublicVariablesSearchSearchGet(search: string, accessToken?: string, userId?: number, variableCategoryName?: string, source?: string, effectOrCause?: string, publicEffectOrCause?: string, limit?: number, offset?: number, sort?: number, extraHttpRequestParams?: any): Observable<models.Variable> {
        return this.v1PublicVariablesSearchSearchGetWithHttpInfo(search, accessToken, userId, variableCategoryName, source, effectOrCause, publicEffectOrCause, limit, offset, sort, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Delete All Measurements For Variable
     * Users can delete all of their measurements for a variable
     * @param variableId Id of the variable whose measurements should be deleted
     */
    public v1UserVariablesDeletePost(variableId: models.UserVariableDelete, extraHttpRequestParams?: any): Observable<{}> {
        return this.v1UserVariablesDeletePostWithHttpInfo(variableId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Update User Settings for a Variable
     * Users can change the parameters used in analysis of that variable such as the expected duration of action for a variable to have an effect, the estimated delay before the onset of action. In order to filter out erroneous data, they are able to set the maximum and minimum reasonable daily values for a variable.
     * @param userVariables Variable user settings data
     */
    public v1UserVariablesPost(userVariables: models.UserVariables, extraHttpRequestParams?: any): Observable<{}> {
        return this.v1UserVariablesPostWithHttpInfo(userVariables, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Reset user settings for a variable to defaults
     * Reset user settings for a variable to defaults
     * @param variableId Id of the variable that should be reset
     */
    public v1UserVariablesResetPost(variableId: models.UserVariableDelete, extraHttpRequestParams?: any): Observable<{}> {
        return this.v1UserVariablesResetPostWithHttpInfo(variableId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Variable categories
     * The variable categories include Activity, Causes of Illness, Cognitive Performance, Conditions, Environment, Foods, Location, Miscellaneous, Mood, Nutrition, Physical Activity, Physique, Sleep, Social Interactions, Symptoms, Treatments, Vital Signs, and Work.
     */
    public v1VariableCategoriesGet(extraHttpRequestParams?: any): Observable<Array<models.VariableCategory>> {
        return this.v1VariableCategoriesGetWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get variables with user&#39;s settings
     * Get variables for which the user has measurements. If the user has specified variable settings, these are provided instead of the common variable defaults.
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     * @param id Common variable id
     * @param category Filter data by category
     * @param name Original name of the variable (supports exact name match only)
     * @param updatedAt Filter by the last time any of the properties of the variable were changed. Uses UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;
     * @param source The name of the data source that created the variable (supports exact name match only). So if you have a client application and you only want variables that were last updated by your app, you can include the name of your app here
     * @param latestMeasurementTime Filter variables based on the last time a measurement for them was created or updated in the UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;
     * @param numberOfRawMeasurements Filter variables by the total number of measurements that they have. This could be used of you want to filter or sort by popularity.
     * @param lastSource Limit variables to those which measurements were last submitted by a specific source. So if you have a client application and you only want variables that were last updated by your app, you can include the name of your app here. (supports exact name match only)
     * @param limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
     * @param offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
     * @param sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
     */
    public v1VariablesGet(accessToken?: string, userId?: number, id?: number, category?: string, name?: string, updatedAt?: string, source?: string, latestMeasurementTime?: string, numberOfRawMeasurements?: string, lastSource?: string, limit?: number, offset?: number, sort?: number, extraHttpRequestParams?: any): Observable<models.Variable> {
        return this.v1VariablesGetWithHttpInfo(accessToken, userId, id, category, name, updatedAt, source, latestMeasurementTime, numberOfRawMeasurements, lastSource, limit, offset, sort, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Create Variables
     * Allows the client to create a new variable in the &#x60;variables&#x60; table.
     * @param body Original name for the variable.
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     */
    public v1VariablesPost(body: models.VariablesNew, accessToken?: string, userId?: number, extraHttpRequestParams?: any): Observable<{}> {
        return this.v1VariablesPostWithHttpInfo(body, accessToken, userId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get variables by search query
     * Get variables containing the search characters for which the currently logged in user has measurements. Used to provide auto-complete function in variable search boxes.
     * @param search Search query which may be an entire variable name or a fragment of one.
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     * @param variableCategoryName Filter variables by category name. The variable categories include Activity, Causes of Illness, Cognitive Performance, Conditions, Environment, Foods, Location, Miscellaneous, Mood, Nutrition, Physical Activity, Physique, Sleep, Social Interactions, Symptoms, Treatments, Vital Signs, and Work.
     * @param includePublic Set to true if you would like to include public variables when no user variables are found.
     * @param manualTracking Set to true if you would like to exlude variables like apps and website names.
     * @param source Specify a data source name to only return variables from a specific data source.
     * @param effectOrCause Indicate if you only want variables that have user correlations. Possible values are effect and cause.
     * @param publicEffectOrCause Indicate if you only want variables that have aggregated correlations.  Possible values are effect and cause.
     * @param limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
     * @param offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
     */
    public v1VariablesSearchSearchGet(search: string, accessToken?: string, userId?: number, variableCategoryName?: string, includePublic?: boolean, manualTracking?: boolean, source?: string, effectOrCause?: string, publicEffectOrCause?: string, limit?: number, offset?: number, extraHttpRequestParams?: any): Observable<Array<models.Variable>> {
        return this.v1VariablesSearchSearchGetWithHttpInfo(search, accessToken, userId, variableCategoryName, includePublic, manualTracking, source, effectOrCause, publicEffectOrCause, limit, offset, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get info about a variable
     * Get all of the settings and information about a variable by its name. If the logged in user has modified the settings for the variable, these will be provided instead of the default settings for that variable.
     * @param variableName Variable name
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     */
    public v1VariablesVariableNameGet(variableName: string, accessToken?: string, userId?: number, extraHttpRequestParams?: any): Observable<models.Variable> {
        return this.v1VariablesVariableNameGetWithHttpInfo(variableName, accessToken, userId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * Get public variables
     * This endpoint retrieves an array of all public variables. Public variables are things like foods, medications, symptoms, conditions, and anything not unique to a particular user. For instance, a telephone number or name would not be a public variable.
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     * @param id Common variable id
     * @param category Filter data by category
     * @param name Original name of the variable (supports exact name match only)
     * @param updatedAt Filter by the last time any of the properties of the variable were changed. Uses UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;
     * @param source The name of the data source that created the variable (supports exact name match only). So if you have a client application and you only want variables that were last updated by your app, you can include the name of your app here
     * @param latestMeasurementTime Filter variables based on the last time a measurement for them was created or updated in the UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;
     * @param numberOfRawMeasurements Filter variables by the total number of measurements that they have. This could be used of you want to filter or sort by popularity.
     * @param lastSource Limit variables to those which measurements were last submitted by a specific source. So if you have a client application and you only want variables that were last updated by your app, you can include the name of your app here. (supports exact name match only)
     * @param limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
     * @param offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
     * @param sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
     */
    public v1PublicVariablesGetWithHttpInfo(accessToken?: string, userId?: number, id?: number, category?: string, name?: string, updatedAt?: string, source?: string, latestMeasurementTime?: string, numberOfRawMeasurements?: string, lastSource?: string, limit?: number, offset?: number, sort?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v1/public/variables`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (accessToken !== undefined) {
            queryParameters.set('access_token', <any>accessToken);
        }
        if (userId !== undefined) {
            queryParameters.set('userId', <any>userId);
        }
        if (id !== undefined) {
            queryParameters.set('id', <any>id);
        }
        if (category !== undefined) {
            queryParameters.set('category', <any>category);
        }
        if (name !== undefined) {
            queryParameters.set('name', <any>name);
        }
        if (updatedAt !== undefined) {
            queryParameters.set('updatedAt', <any>updatedAt);
        }
        if (source !== undefined) {
            queryParameters.set('source', <any>source);
        }
        if (latestMeasurementTime !== undefined) {
            queryParameters.set('latestMeasurementTime', <any>latestMeasurementTime);
        }
        if (numberOfRawMeasurements !== undefined) {
            queryParameters.set('numberOfRawMeasurements', <any>numberOfRawMeasurements);
        }
        if (lastSource !== undefined) {
            queryParameters.set('lastSource', <any>lastSource);
        }
        if (limit !== undefined) {
            queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined) {
            queryParameters.set('offset', <any>offset);
        }
        if (sort !== undefined) {
            queryParameters.set('sort', <any>sort);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
        // authentication (access_token) required
        if (this.configuration.apiKey)
        {
            formParams.set('access_token', this.configuration.apiKey);
        }
        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get top 5 PUBLIC variables with the most correlations
     * Get top 5 PUBLIC variables with the most correlations containing the entered search characters. For example, search for &#39;mood&#39; as an effect. Since &#39;Overall Mood&#39; has a lot of correlations with other variables, it should be in the autocomplete list.Supported filter parameters:&lt;ul&gt;&lt;li&gt;&lt;b&gt;category&lt;/b&gt; - Category of Variable&lt;/li&gt;&lt;/ul&gt;
     * @param search Search query can be some fraction of a variable name.
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     * @param variableCategoryName Filter variables by category name. The variable categories include Activity, Causes of Illness, Cognitive Performance, Conditions, Environment, Foods, Location, Miscellaneous, Mood, Nutrition, Physical Activity, Physique, Sleep, Social Interactions, Symptoms, Treatments, Vital Signs, and Work.
     * @param source Specify a data source name to only return variables from a specific data source.
     * @param effectOrCause Indicate if you only want variables that have user correlations. Possible values are effect and cause.
     * @param publicEffectOrCause Indicate if you only want variables that have aggregated correlations.  Possible values are effect and cause.
     * @param limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
     * @param offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
     * @param sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
     */
    public v1PublicVariablesSearchSearchGetWithHttpInfo(search: string, accessToken?: string, userId?: number, variableCategoryName?: string, source?: string, effectOrCause?: string, publicEffectOrCause?: string, limit?: number, offset?: number, sort?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v1/public/variables/search/${search}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'search' is not null or undefined
        if (search === null || search === undefined) {
            throw new Error('Required parameter search was null or undefined when calling v1PublicVariablesSearchSearchGet.');
        }
        if (accessToken !== undefined) {
            queryParameters.set('access_token', <any>accessToken);
        }
        if (userId !== undefined) {
            queryParameters.set('userId', <any>userId);
        }
        if (variableCategoryName !== undefined) {
            queryParameters.set('variableCategoryName', <any>variableCategoryName);
        }
        if (source !== undefined) {
            queryParameters.set('source', <any>source);
        }
        if (effectOrCause !== undefined) {
            queryParameters.set('effectOrCause', <any>effectOrCause);
        }
        if (publicEffectOrCause !== undefined) {
            queryParameters.set('publicEffectOrCause', <any>publicEffectOrCause);
        }
        if (limit !== undefined) {
            queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined) {
            queryParameters.set('offset', <any>offset);
        }
        if (sort !== undefined) {
            queryParameters.set('sort', <any>sort);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
        // authentication (access_token) required
        if (this.configuration.apiKey)
        {
            formParams.set('access_token', this.configuration.apiKey);
        }
        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Delete All Measurements For Variable
     * Users can delete all of their measurements for a variable
     * @param variableId Id of the variable whose measurements should be deleted
     */
    public v1UserVariablesDeletePostWithHttpInfo(variableId: models.UserVariableDelete, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v1/userVariables/delete`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'variableId' is not null or undefined
        if (variableId === null || variableId === undefined) {
            throw new Error('Required parameter variableId was null or undefined when calling v1UserVariablesDeletePost.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
        // authentication (access_token) required
        if (this.configuration.apiKey)
        {
            formParams.set('access_token', this.configuration.apiKey);
        }
        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: variableId == null ? '' : JSON.stringify(variableId), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Update User Settings for a Variable
     * Users can change the parameters used in analysis of that variable such as the expected duration of action for a variable to have an effect, the estimated delay before the onset of action. In order to filter out erroneous data, they are able to set the maximum and minimum reasonable daily values for a variable.
     * @param userVariables Variable user settings data
     */
    public v1UserVariablesPostWithHttpInfo(userVariables: models.UserVariables, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v1/userVariables`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userVariables' is not null or undefined
        if (userVariables === null || userVariables === undefined) {
            throw new Error('Required parameter userVariables was null or undefined when calling v1UserVariablesPost.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
        // authentication (access_token) required
        if (this.configuration.apiKey)
        {
            formParams.set('access_token', this.configuration.apiKey);
        }
        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: userVariables == null ? '' : JSON.stringify(userVariables), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Reset user settings for a variable to defaults
     * Reset user settings for a variable to defaults
     * @param variableId Id of the variable that should be reset
     */
    public v1UserVariablesResetPostWithHttpInfo(variableId: models.UserVariableDelete, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v1/userVariables/reset`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'variableId' is not null or undefined
        if (variableId === null || variableId === undefined) {
            throw new Error('Required parameter variableId was null or undefined when calling v1UserVariablesResetPost.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
        // authentication (access_token) required
        if (this.configuration.apiKey)
        {
            formParams.set('access_token', this.configuration.apiKey);
        }
        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: variableId == null ? '' : JSON.stringify(variableId), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Variable categories
     * The variable categories include Activity, Causes of Illness, Cognitive Performance, Conditions, Environment, Foods, Location, Miscellaneous, Mood, Nutrition, Physical Activity, Physique, Sleep, Social Interactions, Symptoms, Treatments, Vital Signs, and Work.
     */
    public v1VariableCategoriesGetWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v1/variableCategories`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
        // authentication (access_token) required
        if (this.configuration.apiKey)
        {
            formParams.set('access_token', this.configuration.apiKey);
        }
        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get variables with user&#39;s settings
     * Get variables for which the user has measurements. If the user has specified variable settings, these are provided instead of the common variable defaults.
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     * @param id Common variable id
     * @param category Filter data by category
     * @param name Original name of the variable (supports exact name match only)
     * @param updatedAt Filter by the last time any of the properties of the variable were changed. Uses UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;
     * @param source The name of the data source that created the variable (supports exact name match only). So if you have a client application and you only want variables that were last updated by your app, you can include the name of your app here
     * @param latestMeasurementTime Filter variables based on the last time a measurement for them was created or updated in the UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;
     * @param numberOfRawMeasurements Filter variables by the total number of measurements that they have. This could be used of you want to filter or sort by popularity.
     * @param lastSource Limit variables to those which measurements were last submitted by a specific source. So if you have a client application and you only want variables that were last updated by your app, you can include the name of your app here. (supports exact name match only)
     * @param limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
     * @param offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
     * @param sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
     */
    public v1VariablesGetWithHttpInfo(accessToken?: string, userId?: number, id?: number, category?: string, name?: string, updatedAt?: string, source?: string, latestMeasurementTime?: string, numberOfRawMeasurements?: string, lastSource?: string, limit?: number, offset?: number, sort?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v1/variables`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (accessToken !== undefined) {
            queryParameters.set('access_token', <any>accessToken);
        }
        if (userId !== undefined) {
            queryParameters.set('userId', <any>userId);
        }
        if (id !== undefined) {
            queryParameters.set('id', <any>id);
        }
        if (category !== undefined) {
            queryParameters.set('category', <any>category);
        }
        if (name !== undefined) {
            queryParameters.set('name', <any>name);
        }
        if (updatedAt !== undefined) {
            queryParameters.set('updatedAt', <any>updatedAt);
        }
        if (source !== undefined) {
            queryParameters.set('source', <any>source);
        }
        if (latestMeasurementTime !== undefined) {
            queryParameters.set('latestMeasurementTime', <any>latestMeasurementTime);
        }
        if (numberOfRawMeasurements !== undefined) {
            queryParameters.set('numberOfRawMeasurements', <any>numberOfRawMeasurements);
        }
        if (lastSource !== undefined) {
            queryParameters.set('lastSource', <any>lastSource);
        }
        if (limit !== undefined) {
            queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined) {
            queryParameters.set('offset', <any>offset);
        }
        if (sort !== undefined) {
            queryParameters.set('sort', <any>sort);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
        // authentication (access_token) required
        if (this.configuration.apiKey)
        {
            formParams.set('access_token', this.configuration.apiKey);
        }
        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Create Variables
     * Allows the client to create a new variable in the &#x60;variables&#x60; table.
     * @param body Original name for the variable.
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     */
    public v1VariablesPostWithHttpInfo(body: models.VariablesNew, accessToken?: string, userId?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v1/variables`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling v1VariablesPost.');
        }
        if (accessToken !== undefined) {
            queryParameters.set('access_token', <any>accessToken);
        }
        if (userId !== undefined) {
            queryParameters.set('userId', <any>userId);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
        // authentication (access_token) required
        if (this.configuration.apiKey)
        {
            formParams.set('access_token', this.configuration.apiKey);
        }
        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get variables by search query
     * Get variables containing the search characters for which the currently logged in user has measurements. Used to provide auto-complete function in variable search boxes.
     * @param search Search query which may be an entire variable name or a fragment of one.
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     * @param variableCategoryName Filter variables by category name. The variable categories include Activity, Causes of Illness, Cognitive Performance, Conditions, Environment, Foods, Location, Miscellaneous, Mood, Nutrition, Physical Activity, Physique, Sleep, Social Interactions, Symptoms, Treatments, Vital Signs, and Work.
     * @param includePublic Set to true if you would like to include public variables when no user variables are found.
     * @param manualTracking Set to true if you would like to exlude variables like apps and website names.
     * @param source Specify a data source name to only return variables from a specific data source.
     * @param effectOrCause Indicate if you only want variables that have user correlations. Possible values are effect and cause.
     * @param publicEffectOrCause Indicate if you only want variables that have aggregated correlations.  Possible values are effect and cause.
     * @param limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
     * @param offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
     */
    public v1VariablesSearchSearchGetWithHttpInfo(search: string, accessToken?: string, userId?: number, variableCategoryName?: string, includePublic?: boolean, manualTracking?: boolean, source?: string, effectOrCause?: string, publicEffectOrCause?: string, limit?: number, offset?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v1/variables/search/${search}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'search' is not null or undefined
        if (search === null || search === undefined) {
            throw new Error('Required parameter search was null or undefined when calling v1VariablesSearchSearchGet.');
        }
        if (accessToken !== undefined) {
            queryParameters.set('access_token', <any>accessToken);
        }
        if (userId !== undefined) {
            queryParameters.set('userId', <any>userId);
        }
        if (variableCategoryName !== undefined) {
            queryParameters.set('variableCategoryName', <any>variableCategoryName);
        }
        if (includePublic !== undefined) {
            queryParameters.set('includePublic', <any>includePublic);
        }
        if (manualTracking !== undefined) {
            queryParameters.set('manualTracking', <any>manualTracking);
        }
        if (source !== undefined) {
            queryParameters.set('source', <any>source);
        }
        if (effectOrCause !== undefined) {
            queryParameters.set('effectOrCause', <any>effectOrCause);
        }
        if (publicEffectOrCause !== undefined) {
            queryParameters.set('publicEffectOrCause', <any>publicEffectOrCause);
        }
        if (limit !== undefined) {
            queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined) {
            queryParameters.set('offset', <any>offset);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
        // authentication (access_token) required
        if (this.configuration.apiKey)
        {
            formParams.set('access_token', this.configuration.apiKey);
        }
        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get info about a variable
     * Get all of the settings and information about a variable by its name. If the logged in user has modified the settings for the variable, these will be provided instead of the default settings for that variable.
     * @param variableName Variable name
     * @param accessToken User&#39;s OAuth2 access token
     * @param userId User&#39;s id
     */
    public v1VariablesVariableNameGetWithHttpInfo(variableName: string, accessToken?: string, userId?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/v1/variables/${variableName}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'variableName' is not null or undefined
        if (variableName === null || variableName === undefined) {
            throw new Error('Required parameter variableName was null or undefined when calling v1VariablesVariableNameGet.');
        }
        if (accessToken !== undefined) {
            queryParameters.set('access_token', <any>accessToken);
        }
        if (userId !== undefined) {
            queryParameters.set('userId', <any>userId);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
        // authentication (access_token) required
        if (this.configuration.apiKey)
        {
            formParams.set('access_token', this.configuration.apiKey);
        }
        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
