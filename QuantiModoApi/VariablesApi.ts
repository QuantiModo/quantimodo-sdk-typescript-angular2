/**
 * quantimodo
 * QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do).
 *
 * OpenAPI spec version: 5.8.728
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class VariablesApi {

    protected basePath = 'https://app.quantimo.do/api';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * Delete previously created user tags or ingredients.
     * @summary Delete user tag or ingredient
     * @param taggedVariableId This is the id of the variable being tagged with an ingredient or something.
     * @param tagVariableId This is the id of the ingredient variable whose value is determined based on the value of the tagged variable.
     */
    public deleteUserTag(taggedVariableId: number, tagVariableId: number, extraHttpRequestParams?: any): Observable<models.CommonResponse> {
        return this.deleteUserTagWithHttpInfo(taggedVariableId, tagVariableId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Users can delete all of their measurements for a variable
     * @summary Delete All Measurements For Variable
     * @param variableId Id of the variable whose measurements should be deleted
     */
    public deleteUserVariable(variableId: models.UserVariableDelete, extraHttpRequestParams?: any): Observable<{}> {
        return this.deleteUserVariableWithHttpInfo(variableId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * This endpoint retrieves an array of all public variables. Public variables are things like foods, medications, symptoms, conditions, and anything not unique to a particular user. For instance, a telephone number or name would not be a public variable.
     * @summary Get public variables
     * @param userId User&#39;s id
     * @param id Common variable id
     * @param variableCategoryName Limit results to a specific variable category
     * @param name Original name of the variable (supports exact name match only)
     * @param updatedAt When the record was last updated. Use UTC ISO 8601 &#x60;YYYY-MM-DDThh:mm:ss&#x60; datetime format. Time zone should be UTC and not local.
     * @param sourceName ID of the source you want measurements for (supports exact name match only)
     * @param earliestMeasurementTime Excluded records with measurement times earlier than this value. Use UTC ISO 8601 &#x60;YYYY-MM-DDThh:mm:ss&#x60;  datetime format. Time zone should be UTC and not local.
     * @param latestMeasurementTime Excluded records with measurement times later than this value. Use UTC ISO 8601 &#x60;YYYY-MM-DDThh:mm:ss&#x60;  datetime format. Time zone should be UTC and not local.
     * @param numberOfRawMeasurements Filter variables by the total number of measurements that they have. This could be used of you want to filter or sort by popularity.
     * @param lastSource Limit variables to those which measurements were last submitted by a specific source. So if you have a client application and you only want variables that were last updated by your app, you can include the name of your app here. (supports exact name match only)
     * @param limit The LIMIT is used to limit the number of results returned. So if youhave 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records.
     * @param offset OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause.If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned.
     * @param sort Sort by one of the listed field names. If the field name is prefixed with &#x60;-&#x60;, it will sort in descending order.
     */
    public getPublicVariables(userId?: number, id?: number, variableCategoryName?: string, name?: string, updatedAt?: string, sourceName?: string, earliestMeasurementTime?: string, latestMeasurementTime?: string, numberOfRawMeasurements?: string, lastSource?: string, limit?: number, offset?: number, sort?: string, extraHttpRequestParams?: any): Observable<Array<models.Variable>> {
        return this.getPublicVariablesWithHttpInfo(userId, id, variableCategoryName, name, updatedAt, sourceName, earliestMeasurementTime, latestMeasurementTime, numberOfRawMeasurements, lastSource, limit, offset, sort, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Get variables for which the user has measurements. If the user has specified variable settings, these are provided instead of the common variable defaults.
     * @summary Get variables with user's settings
     * @param userId User&#39;s id
     * @param id Common variable id
     * @param variableCategoryName Limit results to a specific variable category
     * @param name Original name of the variable (supports exact name match only)
     * @param updatedAt When the record was last updated. Use UTC ISO 8601 &#x60;YYYY-MM-DDThh:mm:ss&#x60; datetime format. Time zone should be UTC and not local.
     * @param sourceName ID of the source you want measurements for (supports exact name match only)
     * @param earliestMeasurementTime Excluded records with measurement times earlier than this value. Use UTC ISO 8601 &#x60;YYYY-MM-DDThh:mm:ss&#x60;  datetime format. Time zone should be UTC and not local.
     * @param latestMeasurementTime Excluded records with measurement times later than this value. Use UTC ISO 8601 &#x60;YYYY-MM-DDThh:mm:ss&#x60;  datetime format. Time zone should be UTC and not local.
     * @param numberOfRawMeasurements Filter variables by the total number of measurements that they have. This could be used of you want to filter or sort by popularity.
     * @param lastSource Limit variables to those which measurements were last submitted by a specific source. So if you have a client application and you only want variables that were last updated by your app, you can include the name of your app here. (supports exact name match only)
     * @param limit The LIMIT is used to limit the number of results returned. So if youhave 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records.
     * @param offset OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause.If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned.
     * @param sort Sort by one of the listed field names. If the field name is prefixed with &#x60;-&#x60;, it will sort in descending order.
     */
    public getUserVariables(userId?: number, id?: number, variableCategoryName?: string, name?: string, updatedAt?: string, sourceName?: string, earliestMeasurementTime?: string, latestMeasurementTime?: string, numberOfRawMeasurements?: string, lastSource?: string, limit?: number, offset?: number, sort?: string, extraHttpRequestParams?: any): Observable<Array<models.UserVariable>> {
        return this.getUserVariablesWithHttpInfo(userId, id, variableCategoryName, name, updatedAt, sourceName, earliestMeasurementTime, latestMeasurementTime, numberOfRawMeasurements, lastSource, limit, offset, sort, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * The variable categories include Activity, Causes of Illness, Cognitive Performance, Conditions, Environment, Foods, Location, Miscellaneous, Mood, Nutrition, Physical Activity, Physique, Sleep, Social Interactions, Symptoms, Treatments, Vital Signs, and Work.
     * @summary Variable categories
     */
    public getVariableCategories(extraHttpRequestParams?: any): Observable<Array<models.VariableCategory>> {
        return this.getVariableCategoriesWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * This endpoint allows users to tag foods with their ingredients.  This information will then be used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * @summary Post or update user tags or ingredients
     * @param body Contains the new user tag data
     * @param userId User&#39;s id
     */
    public postUserTags(body: models.UserTag, userId?: number, extraHttpRequestParams?: any): Observable<models.CommonResponse> {
        return this.postUserTagsWithHttpInfo(body, userId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Users can change the parameters used in analysis of that variable such as the expected duration of action for a variable to have an effect, the estimated delay before the onset of action. In order to filter out erroneous data, they are able to set the maximum and minimum reasonable daily values for a variable.
     * @summary Update User Settings for a Variable
     * @param userVariables Variable user settings data
     */
    public postUserVariables(userVariables: Array<models.UserVariable>, extraHttpRequestParams?: any): Observable<models.CommonResponse> {
        return this.postUserVariablesWithHttpInfo(userVariables, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Reset user settings for a variable to defaults
     * @summary Reset user settings for a variable to defaults
     * @param variableId Id of the variable whose measurements should be deleted
     */
    public resetUserVariableSettings(variableId: models.UserVariableDelete, extraHttpRequestParams?: any): Observable<{}> {
        return this.resetUserVariableSettingsWithHttpInfo(variableId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * Delete user tag or ingredient
     * Delete previously created user tags or ingredients.
     * @param taggedVariableId This is the id of the variable being tagged with an ingredient or something.
     * @param tagVariableId This is the id of the ingredient variable whose value is determined based on the value of the tagged variable.
     */
    public deleteUserTagWithHttpInfo(taggedVariableId: number, tagVariableId: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v3/userTags/delete';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'taggedVariableId' is not null or undefined
        if (taggedVariableId === null || taggedVariableId === undefined) {
            throw new Error('Required parameter taggedVariableId was null or undefined when calling deleteUserTag.');
        }
        // verify required parameter 'tagVariableId' is not null or undefined
        if (tagVariableId === null || tagVariableId === undefined) {
            throw new Error('Required parameter tagVariableId was null or undefined when calling deleteUserTag.');
        }
        if (taggedVariableId !== undefined) {
            queryParameters.set('taggedVariableId', <any>taggedVariableId);
        }

        if (tagVariableId !== undefined) {
            queryParameters.set('tagVariableId', <any>tagVariableId);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (access_token) required
        if (this.configuration.apiKey) {
            queryParameters.set('access_token', this.configuration.apiKey);
        }

        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Delete All Measurements For Variable
     * Users can delete all of their measurements for a variable
     * @param variableId Id of the variable whose measurements should be deleted
     */
    public deleteUserVariableWithHttpInfo(variableId: models.UserVariableDelete, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v3/userVariables/delete';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'variableId' is not null or undefined
        if (variableId === null || variableId === undefined) {
            throw new Error('Required parameter variableId was null or undefined when calling deleteUserVariable.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (access_token) required
        if (this.configuration.apiKey) {
            queryParameters.set('access_token', this.configuration.apiKey);
        }

        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            body: variableId == null ? '' : JSON.stringify(variableId), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get public variables
     * This endpoint retrieves an array of all public variables. Public variables are things like foods, medications, symptoms, conditions, and anything not unique to a particular user. For instance, a telephone number or name would not be a public variable.
     * @param userId User&#39;s id
     * @param id Common variable id
     * @param variableCategoryName Limit results to a specific variable category
     * @param name Original name of the variable (supports exact name match only)
     * @param updatedAt When the record was last updated. Use UTC ISO 8601 &#x60;YYYY-MM-DDThh:mm:ss&#x60; datetime format. Time zone should be UTC and not local.
     * @param sourceName ID of the source you want measurements for (supports exact name match only)
     * @param earliestMeasurementTime Excluded records with measurement times earlier than this value. Use UTC ISO 8601 &#x60;YYYY-MM-DDThh:mm:ss&#x60;  datetime format. Time zone should be UTC and not local.
     * @param latestMeasurementTime Excluded records with measurement times later than this value. Use UTC ISO 8601 &#x60;YYYY-MM-DDThh:mm:ss&#x60;  datetime format. Time zone should be UTC and not local.
     * @param numberOfRawMeasurements Filter variables by the total number of measurements that they have. This could be used of you want to filter or sort by popularity.
     * @param lastSource Limit variables to those which measurements were last submitted by a specific source. So if you have a client application and you only want variables that were last updated by your app, you can include the name of your app here. (supports exact name match only)
     * @param limit The LIMIT is used to limit the number of results returned. So if youhave 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records.
     * @param offset OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause.If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned.
     * @param sort Sort by one of the listed field names. If the field name is prefixed with &#x60;-&#x60;, it will sort in descending order.
     */
    public getPublicVariablesWithHttpInfo(userId?: number, id?: number, variableCategoryName?: string, name?: string, updatedAt?: string, sourceName?: string, earliestMeasurementTime?: string, latestMeasurementTime?: string, numberOfRawMeasurements?: string, lastSource?: string, limit?: number, offset?: number, sort?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v3/public/variables';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (userId !== undefined) {
            queryParameters.set('userId', <any>userId);
        }

        if (id !== undefined) {
            queryParameters.set('id', <any>id);
        }

        if (variableCategoryName !== undefined) {
            queryParameters.set('variableCategoryName', <any>variableCategoryName);
        }

        if (name !== undefined) {
            queryParameters.set('name', <any>name);
        }

        if (updatedAt !== undefined) {
            queryParameters.set('updatedAt', <any>updatedAt);
        }

        if (sourceName !== undefined) {
            queryParameters.set('sourceName', <any>sourceName);
        }

        if (earliestMeasurementTime !== undefined) {
            queryParameters.set('earliestMeasurementTime', <any>earliestMeasurementTime);
        }

        if (latestMeasurementTime !== undefined) {
            queryParameters.set('latestMeasurementTime', <any>latestMeasurementTime);
        }

        if (numberOfRawMeasurements !== undefined) {
            queryParameters.set('numberOfRawMeasurements', <any>numberOfRawMeasurements);
        }

        if (lastSource !== undefined) {
            queryParameters.set('lastSource', <any>lastSource);
        }

        if (limit !== undefined) {
            queryParameters.set('limit', <any>limit);
        }

        if (offset !== undefined) {
            queryParameters.set('offset', <any>offset);
        }

        if (sort !== undefined) {
            queryParameters.set('sort', <any>sort);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (access_token) required
        if (this.configuration.apiKey) {
            queryParameters.set('access_token', this.configuration.apiKey);
        }

        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get variables with user&#39;s settings
     * Get variables for which the user has measurements. If the user has specified variable settings, these are provided instead of the common variable defaults.
     * @param userId User&#39;s id
     * @param id Common variable id
     * @param variableCategoryName Limit results to a specific variable category
     * @param name Original name of the variable (supports exact name match only)
     * @param updatedAt When the record was last updated. Use UTC ISO 8601 &#x60;YYYY-MM-DDThh:mm:ss&#x60; datetime format. Time zone should be UTC and not local.
     * @param sourceName ID of the source you want measurements for (supports exact name match only)
     * @param earliestMeasurementTime Excluded records with measurement times earlier than this value. Use UTC ISO 8601 &#x60;YYYY-MM-DDThh:mm:ss&#x60;  datetime format. Time zone should be UTC and not local.
     * @param latestMeasurementTime Excluded records with measurement times later than this value. Use UTC ISO 8601 &#x60;YYYY-MM-DDThh:mm:ss&#x60;  datetime format. Time zone should be UTC and not local.
     * @param numberOfRawMeasurements Filter variables by the total number of measurements that they have. This could be used of you want to filter or sort by popularity.
     * @param lastSource Limit variables to those which measurements were last submitted by a specific source. So if you have a client application and you only want variables that were last updated by your app, you can include the name of your app here. (supports exact name match only)
     * @param limit The LIMIT is used to limit the number of results returned. So if youhave 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records.
     * @param offset OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause.If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned.
     * @param sort Sort by one of the listed field names. If the field name is prefixed with &#x60;-&#x60;, it will sort in descending order.
     */
    public getUserVariablesWithHttpInfo(userId?: number, id?: number, variableCategoryName?: string, name?: string, updatedAt?: string, sourceName?: string, earliestMeasurementTime?: string, latestMeasurementTime?: string, numberOfRawMeasurements?: string, lastSource?: string, limit?: number, offset?: number, sort?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v3/userVariables';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (userId !== undefined) {
            queryParameters.set('userId', <any>userId);
        }

        if (id !== undefined) {
            queryParameters.set('id', <any>id);
        }

        if (variableCategoryName !== undefined) {
            queryParameters.set('variableCategoryName', <any>variableCategoryName);
        }

        if (name !== undefined) {
            queryParameters.set('name', <any>name);
        }

        if (updatedAt !== undefined) {
            queryParameters.set('updatedAt', <any>updatedAt);
        }

        if (sourceName !== undefined) {
            queryParameters.set('sourceName', <any>sourceName);
        }

        if (earliestMeasurementTime !== undefined) {
            queryParameters.set('earliestMeasurementTime', <any>earliestMeasurementTime);
        }

        if (latestMeasurementTime !== undefined) {
            queryParameters.set('latestMeasurementTime', <any>latestMeasurementTime);
        }

        if (numberOfRawMeasurements !== undefined) {
            queryParameters.set('numberOfRawMeasurements', <any>numberOfRawMeasurements);
        }

        if (lastSource !== undefined) {
            queryParameters.set('lastSource', <any>lastSource);
        }

        if (limit !== undefined) {
            queryParameters.set('limit', <any>limit);
        }

        if (offset !== undefined) {
            queryParameters.set('offset', <any>offset);
        }

        if (sort !== undefined) {
            queryParameters.set('sort', <any>sort);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (access_token) required
        if (this.configuration.apiKey) {
            queryParameters.set('access_token', this.configuration.apiKey);
        }

        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Variable categories
     * The variable categories include Activity, Causes of Illness, Cognitive Performance, Conditions, Environment, Foods, Location, Miscellaneous, Mood, Nutrition, Physical Activity, Physique, Sleep, Social Interactions, Symptoms, Treatments, Vital Signs, and Work.
     */
    public getVariableCategoriesWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v3/variableCategories';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (access_token) required
        if (this.configuration.apiKey) {
            queryParameters.set('access_token', this.configuration.apiKey);
        }

        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Post or update user tags or ingredients
     * This endpoint allows users to tag foods with their ingredients.  This information will then be used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * @param body Contains the new user tag data
     * @param userId User&#39;s id
     */
    public postUserTagsWithHttpInfo(body: models.UserTag, userId?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v3/userTags';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postUserTags.');
        }
        if (userId !== undefined) {
            queryParameters.set('userId', <any>userId);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (access_token) required
        if (this.configuration.apiKey) {
            queryParameters.set('access_token', this.configuration.apiKey);
        }

        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Update User Settings for a Variable
     * Users can change the parameters used in analysis of that variable such as the expected duration of action for a variable to have an effect, the estimated delay before the onset of action. In order to filter out erroneous data, they are able to set the maximum and minimum reasonable daily values for a variable.
     * @param userVariables Variable user settings data
     */
    public postUserVariablesWithHttpInfo(userVariables: Array<models.UserVariable>, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v3/userVariables';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userVariables' is not null or undefined
        if (userVariables === null || userVariables === undefined) {
            throw new Error('Required parameter userVariables was null or undefined when calling postUserVariables.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (access_token) required
        if (this.configuration.apiKey) {
            queryParameters.set('access_token', this.configuration.apiKey);
        }

        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: userVariables == null ? '' : JSON.stringify(userVariables), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Reset user settings for a variable to defaults
     * Reset user settings for a variable to defaults
     * @param variableId Id of the variable whose measurements should be deleted
     */
    public resetUserVariableSettingsWithHttpInfo(variableId: models.UserVariableDelete, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v3/userVariables/reset';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'variableId' is not null or undefined
        if (variableId === null || variableId === undefined) {
            throw new Error('Required parameter variableId was null or undefined when calling resetUserVariableSettings.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (access_token) required
        if (this.configuration.apiKey) {
            queryParameters.set('access_token', this.configuration.apiKey);
        }

        // authentication (quantimodo_oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: variableId == null ? '' : JSON.stringify(variableId), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
